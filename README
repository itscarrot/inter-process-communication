This is a Java programming for inter-process communication
Author: BUZhijiang
The basic architecture of the system consists of two main components: a group of servers and a group of clients. One of the servers is called the dispatcher while the others are called backend servers. The clients are connected to the dispatcher by a network as shown in Figure 1. Each backend server maintains a set of data objects which initial values are zero. You may implement the data objects as an array of integers. Each client process consists of a sequence of read and write operations as specified by the user through the input screen one by one. For a read operation, the user specifies the data object ID while for a write operation, the user specifies the object ID and the new value for the object. After inputting a read or a write operation, the client process will send it to the dispatcher through the network using a TCP’s socket to read the data object or write a new value for the data object. The user specifies the next operation after the previous one has been completed, i.e., receiving the result from the server process. If the user inputs a terminator, i.e., “E”, the client process will be terminated.

The initial status of the dispatcher is in waiting state, i.e., it waits for incoming operations from clients. Upon receiving an operation (either a read or write operation), the dispatcher will create a new thread to handle the operation. Since the data objects are distributed according to object ID, it will determine which backend server will handle the operation. It is assumed that the distribution of data objects is static such as backend server 1 maintains data objects with ID from 1 to 9 and backend server 2 maintains data objects with ID from 10 to 19. Then, the dispatcher’s thread will call the selected backend server to handle the operation through RMI. Since the data objects are shared objects, concurrent accesses to them from different operations are not allowed, and each access has to be done in mutual exclusion (even if both of the operations are read operations). After retrieving or updating a data object, the processing at the backend will be delayed for a few seconds, i.e., 3 sec, to simulate the object processing time. Then, the backend server will return a boolean value for write operation or the current value of the data object for a read operation to the dispatcher’s thread. After receiving the result, dispatcher’s thread will send back results to client.  The client process will echo the reply from the server process in the client screen.